// Copyright (c) 2019, The Regents of the University of California
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
// * Redistributions of source code must retain the above copyright
//   notice, this list of conditions and the following disclaimer.
// * Redistributions in binary form must reproduce the above copyright
//   notice, this list of conditions and the following disclaimer in the
//   documentation and/or other materials provided with the distribution.
// * Neither the name of the University of California nor the
//   names of its contributors may be used to endorse or promote products
//   derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OF THE UNIVERSITY OF CALIFORNIA
// BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.

syntax = "proto3";

import "cogrob/service_manager/proto/docker_options.proto";

package cogrob.service_manager;

message ServiceId {
  repeated string namespace = 1;
  string name = 2;
}

enum ServiceType {
  SERVICE_TYPE_UNKNOWN = 0;
  SERVICE_TYPE_GROUP = 1;  // Group a few service as one.
  SERVICE_TYPE_DOCKER = 2;  // Docker-based service: one Docker container.
  SERVICE_TYPE_META = 3;  // Meta service.
}

// Grouped service: a meta service representing a group of other services.
// Next TAG: 2
message GroupServiceOptions {
  // Grouped service.
  repeated ServiceId grouped_services = 1;
}

// Next TAG: 4
message DockerServiceOptions {
  // Options passed to docker-py.
  DockerOptions container_options = 1;

  // Whether this container can be stopped (docker stop).
  oneof allow_docker_stop_oneof {
    bool allow_docker_stop = 2;
  }

  // Whether this container can be paused (docker pause).
  oneof allow_docker_pause_oneof {
    bool allow_docker_pause = 3;
  }
}

// Meta service: meta service to keep the system running,
// e.g. operators, etc. Does not really represent something running.
message MetaServiceOptions {
}


message SimulationParameters {
  // Represents CPU usage value (number of cores), memory (bytes), etc.
  message ResourceUsageValue {
    message GaussianValue {
      float mean = 1;  // mu
      float variance = 2;  // sigma^2
    }
    oneof resource_usage_value {
      float fixed_value = 1;
      GaussianValue guassian = 2;
    }
  }

  // CPU usage of the service, e.g. .18 core
  ResourceUsageValue cpu_usage = 1;
  // Memory usage of the service, bytes; e.g. 5242880 bytes (5 MB)
  ResourceUsageValue memory_usage = 2;
}

enum RunMode {
  RUN_MODE_UNKNOWN = 0;
  RUN_MODE_ACTUAL = 1;
  RUN_MODE_SIMULATION = 2;
}

message ReadyDetectionMethod {
  oneof ready_detection_oneof {
    float wait_fixed_time = 1;
    bool wait_for_prober = 2;
  }
}

// ServiceOptions: A user can use these options when adding a service, updating
// a service, or removing a service.
// Next TAG: 12
message ServiceOptions {
  // Unique identifier.
  ServiceId id = 1;

  // Type of the service.
  ServiceType type = 2;

  // Service options, must match type.
  oneof service_options {
    GroupServiceOptions group_service_options = 3;
    DockerServiceOptions docker_service_options = 4;
    MetaServiceOptions meta_service_options = 5;
  }

  // These dependencies services must be active when this service is active.
  repeated ServiceId implied_dependencies = 6;

  // Whether this service can be deactivated. Set true for always-on service
  // (e.g. roscore)
  bool disable_deactivate = 7;

  // Is this service enabled? A service can exist, but disabled. This flag will
  // prevent the service from entering active status.
  bool enabled = 8;

  // Run mode, e.g. actual, simulation, etc.
  RunMode run_mode = 9;

  // Parameters to run a simulation.
  SimulationParameters simulation_parameters = 10;

  // A method to set ready status and return to the request caller.
  ReadyDetectionMethod ready_detection_method = 11;
}
