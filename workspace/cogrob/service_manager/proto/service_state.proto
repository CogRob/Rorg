// Copyright (c) 2019, The Regents of the University of California
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
// * Redistributions of source code must retain the above copyright
//   notice, this list of conditions and the following disclaimer.
// * Redistributions in binary form must reproduce the above copyright
//   notice, this list of conditions and the following disclaimer in the
//   documentation and/or other materials provided with the distribution.
// * Neither the name of the University of California nor the
//   names of its contributors may be used to endorse or promote products
//   derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OF THE UNIVERSITY OF CALIFORNIA
// BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.

syntax = "proto3";

import "cogrob/service_manager/proto/service_request.proto";
import "cogrob/service_manager/proto/service_options.proto";

package cogrob.service_manager;

message DockerServiceState {
  enum DockerStatus {
    DOCKER_STATUS_UNKNOWN = 0;
    DOCKER_STATUS_ACTIVE = 1;
    DOCKER_STATUS_STOPPED = 2;
    DOCKER_STATUS_PAUSED = 3;
  }
  DockerStatus status = 1;
  string docker_container_id = 2;
}

message GroupServiceState {
}

message MetaServiceState {
}

// Next TAG: 10
message ServiceState {
  // Unique identifier, must be same as id in options field.
  ServiceId id = 1;

  // Type of the service, must be same as id in options field.
  ServiceType type = 2;

  cogrob.service_manager.ServiceOptions options = 3;

  oneof service_status {
    DockerServiceState docker_service_state = 4;
    GroupServiceState group_service_state = 5;
    MetaServiceState meta_service_state = 9;
  }

  // Active: it is running. Stopped: it is not active, and it will not remember
  // the requests it sent. Paused: it is not active, but it will assume the
  // requesets it sent before when it wakes up.
  enum ServiceStatus {
    STATUS_UNKNOWN = 0;
    STATUS_ACTIVE = 1;
    STATUS_STOPPED = 2;
    STATUS_PAUSED = 3;
    STATUS_TO_BE_STOPPED = 4;
  }
  ServiceStatus status = 6;

  // Which requests does this service request.
  // TODO(shengye): We will need to find a way to deactivate these requests when
  // the current service crashes (to prevent resource leak). Maybe: always let
  // them to reuse the UUIDs.
  // When Rorg detects this service crashes, it release all of the requests.
  repeated ServiceRequest requests_by_self = 7;

  // Which requests is preventing this service becoming inactive.
  repeated ServiceRequestId requested_by_others = 8;

}
